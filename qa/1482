#!/bin/sh
# PCP QA Test No. 1482
# System-V (non-systemctl) status checks
#
# Copyright (c) 2024 Ken McDonell.  All Rights Reserved.
#

if [ $# -eq 0 ]
then
    seq=`basename $0`
    echo "QA output created by $seq"
else
    # use $seq from caller, unless not set
    [ -n "$seq" ] || seq=`basename $0`
    echo "QA output created by `basename $0` $*"
fi

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

$sudo rm -rf $tmp $tmp.* $seq.full

[ "$PCPQA_SYSTEMD" = no ] || _notrun "using systemctl, not System-V init"

_cleanup()
{
    cd $here
    if [ ! -f $PCP_RUN_DIR/pmcd.pid ]
    then
	echo "Oops, pmcd not running as expected ... restarting"
	_service pmcd start
	_wait_for_pmcd
    fi
    if [ ! -f $PCP_RUN_DIR/pmlogger.pid ]
    then
	echo "Oops, pmlogger not running as expected ... restarting"
	_service pmlogger start
	_wait_for_pmlogger
    fi
    if $pmie_was_running
    then
	_service pmie start >>$seq.full 2>&1
	_wait_for_pmie
    elif [ -f $PCP_RUN_DIR/pmie.pid ]
    then
	_service pmie stop >>$seq.full 2>&1
	_wait_pmie_end
    fi
    if $pmproxy_was_running
    then
	_service pmproxy start >>$seq.full 2>&1
	_wait_for_pmproxy
    elif [ -f $PCP_RUN_DIR/pmproxy.pid ]
    then
	_service pmproxy stop >>$seq.full 2>&1
	_wait_pmproxy_end
    fi
    $sudo rm -rf $tmp $tmp.*
}

pmie_was_running=false
pmproxy_was_running=false

status=0	# success is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_filter()
{
    sed \
	-e "s@$tmp@TMP@g" \
    # end
}

# real QA test starts here
for svc in pmcd pmlogger pmie pmproxy
do
    echo | tee -a $seq.full
    echo "--- $svc stopping ---" | tee -a $seq.full
    case "$svc"
    in
	pmcd)
	    _service $svc stop >>$seq.full 2>&1
	    _wait_pmcd_end
	    ;;

	pmlogger)
	    if [ -f $PCP_RUN_DIR/pmlogger.pid ]
	    then
		pid=`cat $PCP_RUN_DIR/pmlogger.pid`
		_service $svc stop >>$seq.full 2>&1
		_wait_pmlogger_end $pid
	    fi
	    ;;

	pmie)
	    if [ -f $PCP_RUN_DIR/pmie.pid ]
	    then
		pmie_was_running=true
		_service $svc stop >>$seq.full 2>&1
		_wait_pmie_end
	    fi
	    ;;

	pmproxy)
	    if [ -f $PCP_RUN_DIR/pmproxy.pid ]
	    then
		pmproxy_was_running=true
		_service $svc stop >>$seq.full 2>&1
		_wait_pmproxy_end
	    fi
	    ;;
    esac

    echo "--- $svc stopped ---" | tee -a $seq.full
    _service $svc status

    echo "--- $svc starting ---" | tee -a $seq.full
    case "$svc"
    in
	pmcd)
	_service $svc start >>$seq.full 2>&1
	_wait_for_pmcd
	    ;;

	pmlogger)
	    _service $svc start >>$seq.full 2>&1
	    _wait_for_pmlogger
	    ;;

	pmie)
	    _service $svc start >>$seq.full 2>&1
	    _wait_for_pmie
	    ;;

	pmproxy)
	    _service $svc start >>$seq.full 2>&1
	    _wait_for_pmproxy
	    ;;
    esac

    echo "--- $svc started ---" | tee -a $seq.full
    _service $svc status

    case "$svc"
    in
	pmcd|pmlogger)
	    ;;

	pmie)
	    if $pmie_was_running
	    then
		_service pmie start >>$seq.full 2>&1
		_wait_for_pmie
		pmie_was_running=false
	    fi
	    ;;

	pmproxy)
	    if $pmproxy_was_running
	    then
		_service pmproxy start >>$seq.full 2>&1
		_wait_for_pmproxy
		pmproxy_was_running=false
	    fi
	    ;;
    esac

done

# success, all done
exit
